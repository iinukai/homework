# coding: utf-8

# 戦略
# たて4×よこ3のシートから2枚切り取ることを考える。
# 切り取り方は、
#       ■
# ■■ と ■ の2種類ある。
# 4×3のシートの左上から ■■をスライドさせていくと、、
# たて方向には3回動かせる(=置いた場所と合わせると、4パターン)
# よこ方向には1回動かせる(=置いた場所と合わせると、2パターン)
# つまり、たて4-1+1=4, よこ3-2+1=2 パターンで、計8パターンある
# →x*yのシートから、a*bを切り取るのは、(x-a+1)*(y-b+1)パターンある。これを切り取るかたち毎に計算して足し合わせる。
#
# 実行速度
# ・割り切って考えるけど、そのぶん速い
# ・シートの大きさに依存しない(O(1))
# ・切り取りサイズとの関係は…？

def count(column, row, cutSize)
  # 切り取る数とパターン。5以上は考える気にならない…
  patternHash = {
    1 => [[1, 1]],    # ■

    2 => [[1, 2], [2, 1]],  # ■■

    3 => [[1, 3], [3, 1],                  # ■■■    ■
          [2, 2], [2, 2],[2, 2], [2, 2]],  #       ■■

    4 => [[1, 4], [4, 1],                  # ■■■■     ■  
          [2, 3], [2, 3], [3, 2], [3, 2],  #          ■■■     ■ 
          [2, 3], [2, 3], [3, 2], [3, 2],  #                 ■■■      ■
          [2, 3], [2, 3], [3, 2], [3, 2],  #          ■■            ■■■
          [2, 3], [3, 2],                  #           ■■     ■■
          [2, 3], [3, 2],                  #                 ■■     ■■
          [2, 2]],                         #                        ■■

    5 => [[1, 5], [5, 1],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [2, 4], [2, 4], [4, 2], [4, 2],
          [3, 3], [3, 3], [3, 3], [3, 3],
          [3, 3], [3, 3], [3, 3], [3, 3],
          [3, 3], [3, 3], [3, 3], [3, 3],
          [3, 3], [3, 3], [3, 3], [3, 3],
          [3, 3], [3, 3], [3, 3], [3, 3],
          [3, 3], [3, 3],
          [3, 3], [3, 3],
          [3, 3],
          [3, 2], [3, 2], [2, 3], [2, 3],
          [3, 2], [3, 2], [2, 3], [2, 3],
          [3, 2], [3, 2], [2, 3], [2, 3]]
  }

  total = 0
  for pattern in patternHash[cutSize]
    if column >= pattern[0] && row >= pattern[1]
      total += (column - pattern[0] + 1) * (row - pattern[1] + 1)
    end
  end

  return total
end

